 # Background latent preprocessing
    all_latents, _ = get_all_latents(
        image_source, models, int(config.get("SLD", "inv_seed"))
    )  # torch.Size([51, 1, 4, 64, 64])

    ######### MARCO #########
    # Save 10 evenly spaced latents as images
    num_samples = 15
    total_latents = all_latents.shape[0]
    indices = np.linspace(0, total_latents - 1, num_samples, dtype=int)

    # Create directory for saving latent visualizations
    latents_dir = os.path.join(os.path.dirname(entry["output"][-1]), "latent_viz")
    os.makedirs(latents_dir, exist_ok=True)


    # Save raw latent tensors
    for i in indices:
        # Get single latent tensor
        latent = all_latents[i : i + 1]  # Shape: (1, 1, 4, 64, 64)
        
        print(f"Latent {i} shape:", latent.shape)
        print(f"Latent {i} min/max:", latent.min().item(), latent.max().item())
        
        # Convert to numpy and remove batch/channel dims
        latent_np = latent.squeeze().cpu().numpy()  # Shape: (4, 64, 64)
        print(f"Numpy array shape:", latent_np.shape)
        
        # Normalize and convert first 3 channels to RGB
        rgb_channels = []
        for c in range(3):
            channel = latent_np[c]
            if channel.max() == channel.min():
                normalized = np.zeros_like(channel)
            else:
                normalized = ((channel - channel.min()) * 255 / (channel.max() - channel.min()))
            rgb_channels.append(normalized.astype(np.uint8))
            
        rgb_image = np.stack(rgb_channels, axis=-1)  # Shape: (64, 64, 3)
        print(f"RGB image shape:", rgb_image.shape)
        print(f"RGB value range:", rgb_image.min(), rgb_image.max())
        
        latent_image = Image.fromarray(rgb_image)

        # Save image
        filename = os.path.join(latents_dir, f"latent_{i:03d}.png")
        latent_image.save(filename)
        print(f"Saved latent {i} visualization to {filename}")
        print("-" * 40)